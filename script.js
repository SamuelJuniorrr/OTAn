// Lista inicial das 16 alian칞as
const initialTeams = [
  "Alian칞a 1", "Alian칞a 2", "Alian칞a 3", "Alian칞a 4",
  "Alian칞a 5", "Alian칞a 6", "Alian칞a 7", "Alian칞a 8",
  "Alian칞a 9", "Alian칞a 10", "Alian칞a 11", "Alian칞a 12",
  "Alian칞a 13", "Alian칞a 14", "Alian칞a 15", "Alian칞a 16"
];

// Armazena os times classificados em cada rodada
const rounds = {
  1: [],
  2: [],
  3: [],
  4: []
};

/**
 * Cria um elemento de duelo (match) com dois times (teamA e teamB)
 */
function createMatch(round, matchIndex, teamA, teamB) {
  const div = document.createElement("div");
  div.className = "match";
  div.dataset.round = round;
  div.dataset.match = matchIndex;

  const btnA = document.createElement("button");
  btnA.className = "team";
  btnA.textContent = teamA;
  btnA.dataset.team = teamA;

  const btnB = document.createElement("button");
  btnB.className = "team";
  btnB.textContent = teamB;
  btnB.dataset.team = teamB;

  // Evento ao clicar para escolher o vencedor
  btnA.onclick = () => selectWinner(round, matchIndex, teamA, btnA, btnB);
  btnB.onclick = () => selectWinner(round, matchIndex, teamB, btnB, btnA);

  div.appendChild(btnA);
  div.appendChild(document.createTextNode(" vs "));
  div.appendChild(btnB);

  return div;
}

/**
 * Seleciona o vencedor de um duelo, marca visualmente e atualiza pr칩ximas rodadas
 */
function selectWinner(round, matchIndex, winner, winnerBtn, loserBtn) {
  const matchDiv = winnerBtn.parentElement;
  const buttons = matchDiv.querySelectorAll(".team");

  // Remove marca칞칚o anterior
  buttons.forEach(btn => btn.classList.remove("selected"));
  // Marca o vencedor
  winnerBtn.classList.add("selected");

  // Armazena o vencedor na rodada atual
  rounds[round][matchIndex] = winner;

  // Atualiza pr칩xima rodada, se n칚o for a final
  if (round < 4) {
    updateNextRound(round);
  } else {
    // Final do torneio: exibe campe칚o
    document.getElementById("final-result").textContent = `游끥 Campe칚o: ${winner} 游끥`;
  }
}

/**
 * Atualiza a pr칩xima rodada com os vencedores da rodada atual
 */
function updateNextRound(currentRound) {
  const winners = rounds[currentRound].filter(Boolean);

  // Atualiza dados da pr칩xima rodada
  rounds[currentRound + 1] = [];

  const nextRoundDiv = document.getElementById(`round-${currentRound + 1}`);
  nextRoundDiv.innerHTML = `<h2>Semana ${currentRound + 1}</h2>`;

  // Cria duelos na pr칩xima rodada (cada dois vencedores formam um duelo)
  for (let i = 0; i < winners.length; i += 2) {
    const teamA = winners[i];
    const teamB = winners[i + 1];
    if (teamB) {
      const matchEl = createMatch(currentRound + 1, i / 2, teamA, teamB);
      nextRoundDiv.appendChild(matchEl);
    }
  }

  // Limpa rodadas seguintes ap칩s a pr칩xima
  for (let r = currentRound + 2; r <= 4; r++) {
    const roundDiv = document.getElementById(`round-${r}`);
    roundDiv.innerHTML = `<h2>Semana ${r}</h2>`;
    rounds[r] = [];
  }

  // Limpa resultado final enquanto n칚o houver campe칚o
  document.getElementById("final-result").textContent = "";
}

/**
 * Inicializa a primeira rodada com duelos aleat칩rios
 */
function initialize() {
  // Embaralha as alian칞as
  const shuffledTeams = initialTeams
    .map(value => ({ value, sort: Math.random() }))
    .sort((a, b) => a.sort - b.sort)
    .map(({ value }) => value);

  rounds[1] = new Array(8).fill(null);

  const round1Div = document.getElementById("round-1");
  round1Div.innerHTML = `<h2>Semana 1</h2>`;

  for (let i = 0; i < 16; i += 2) {
    const matchEl = createMatch(1, i / 2, shuffledTeams[i], shuffledTeams[i + 1]);
    round1Div.appendChild(matchEl);
  }
}

initialize();
